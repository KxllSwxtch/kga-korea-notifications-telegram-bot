import json
import time
import telebot
import os
import requests
import urllib.parse
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from dotenv import load_dotenv
from datetime import datetime
from translations import translations

# –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
REQUESTS_FILE = "requests.json"
ACCESS_FILE = "access.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}


def load_access():
    if os.path.exists(ACCESS_FILE):
        try:
            with open(ACCESS_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f))
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å access.json: {e}")
            return set()
    return set()


def save_access():
    try:
        with open(ACCESS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(ACCESS), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ access.json: {e}")


MANAGER = 604303416  # –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
state_storage = StateMemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)
user_search_data = {}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –º–æ–∂–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç
def is_authorized(user_id):
    return user_id in ACCESS


def translate_phrase(phrase):
    words = phrase.split()
    translated_words = [translations.get(word, word) for word in words]
    return " ".join(translated_words)


def load_requests():
    global user_requests
    if os.path.exists(REQUESTS_FILE):
        try:
            with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
                user_requests = json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã: {e}")
            user_requests = {}
    else:
        user_requests = {}


def save_requests(new_data):
    global user_requests
    try:
        if os.path.exists(REQUESTS_FILE):
            with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                existing_data = json.loads(content) if content else {}
        else:
            existing_data = {}

        for user_id, new_requests in new_data.items():
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id ‚Äî —Å—Ç—Ä–æ–∫–∞
            user_id_str = str(user_id)
            existing_data[user_id_str] = new_requests

        user_requests = existing_data  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_requests, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")


# FSM: –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class CarForm(StatesGroup):
    brand = State()
    model = State()
    generation = State()
    trim = State()
    mileage_from = State()
    mileage_to = State()


def get_manufacturers():
    url = "https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.CarType.A.)&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        manufacturers.sort(key=lambda x: x.get("Metadata", {}).get("EngName", [""])[0])
        return manufacturers
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–æ–∫:", e)
        return []


def get_models_by_brand(manufacturer):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.(C.CarType.A._.Manufacturer.{manufacturer}.))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if selected_manufacturer:
            return (
                selected_manufacturer.get("Refinements", {})
                .get("Nodes", [])[0]
                .get("Facets", [])
            )
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è {manufacturer}:", e)
        return []


def get_generations_by_model(manufacturer, model_group):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.(C.CarType.A._.(C.Manufacturer.{manufacturer}._.ModelGroup.{model_group}.)))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if not selected_manufacturer:
            return []
        model_group_data = (
            selected_manufacturer.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model = next(
            (item for item in model_group_data if item.get("IsSelected")), None
        )
        if not selected_model:
            return []
        return (
            selected_model.get("Refinements", {}).get("Nodes", [])[0].get("Facets", [])
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è {manufacturer}, {model_group}:", e)
        return []


def get_trims_by_generation(manufacturer, model_group, model):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.(C.CarType.A._.(C.Manufacturer.{manufacturer}._.(C.ModelGroup.{model_group}._.Model.{model}.))))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[1]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if not selected_manufacturer:
            return []
        model_group_data = (
            selected_manufacturer.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model_group = next(
            (item for item in model_group_data if item.get("IsSelected")), None
        )
        if not selected_model_group:
            return []
        model_data = (
            selected_model_group.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model = next(
            (item for item in model_data if item.get("IsSelected")), None
        )
        if not selected_model:
            return []
        return (
            selected_model.get("Refinements", {}).get("Nodes", [])[0].get("Facets", [])
        )
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –¥–ª—è {manufacturer}, {model_group}, {model}:",
            e,
        )
        return []


@bot.message_handler(commands=["start"])
def start_handler(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ", callback_data="search_car"),
    )
    markup.add(
        types.InlineKeyboardButton(
            "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", url="https://t.me/kgaexportbot"
        ),
    )
    markup.add(
        types.InlineKeyboardButton(
            "üìã –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="my_requests"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            "üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="delete_all_requests"
        )
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(
        types.InlineKeyboardButton(
            "üì∏ Instagram", url="https://www.instagram.com/kgakorea/"
        ),
        types.InlineKeyboardButton(
            "üéµ TikTok", url="https://www.tiktok.com/@kga_korea"
        ),
    )
    markup.add(
        types.InlineKeyboardButton("üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏", url="https://kga-korea.com/")
    )

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –±–æ—Ç –æ—Ç *KGA Korea*!\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        "‚Ä¢ üßÆ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*"
    )
    bot.send_message(
        message.chat.id, welcome_text, parse_mode="Markdown", reply_markup=markup
    )


@bot.message_handler(commands=["adduser"])
def handle_add_user(message):
    if message.from_user.id != MANAGER:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    msg = bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:"
    )
    bot.register_next_step_handler(msg, process_user_id_input)


def process_user_id_input(message):
    try:
        new_user_id = int(message.text.strip())
        ACCESS.add(new_user_id)
        save_access()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {new_user_id} —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
        )
    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_start_callback(call):
    start_handler(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "my_requests")
def handle_my_requests(call):
    user_id = call.from_user.id
    if not is_authorized(user_id):
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    if str(user_id) not in user_requests or not user_requests[str(user_id)]:
        bot.send_message(
            call.message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –∞–≤—Ç–æ', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
        )
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for idx, req in enumerate(user_requests[str(user_id)]):
        car_name = f"{req['manufacturer']} {req['model']}"
        markup.add(
            types.InlineKeyboardButton(
                f"‚ùå {car_name}", callback_data=f"delete_request_{idx}"
            )
        )
    markup.add(
        types.InlineKeyboardButton(
            "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="delete_all_requests"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )

    text = "üìã –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ:\n\n"
    for idx, req in enumerate(user_requests[str(user_id)]):
        text += f"{idx+1}. {req['manufacturer']} {req['model']} {req['trim']}\n"
        text += f"–ì–æ–¥—ã: {req['year_from']}-{req['year_to']}\n"
        text += f"–ü—Ä–æ–±–µ–≥: {req['mileage_from']}-{req['mileage_to']} –∫–º\n"
        text += "---\n"

    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_request_"))
def handle_delete_request(call):
    if not is_authorized(call.from_user.id):
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])

    if user_id in user_requests and 0 <= index < len(user_requests[user_id]):
        deleted_req = user_requests[user_id].pop(index)
        save_requests(user_requests)

        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not user_requests[user_id]:
            bot.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –∞–≤—Ç–æ', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
                call.message.chat.id,
                call.message.message_id,
            )
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for idx, req in enumerate(user_requests[user_id]):
            car_name = f"{req['manufacturer']} {req['model']}"
            markup.add(
                types.InlineKeyboardButton(
                    f"‚ùå {car_name}", callback_data=f"delete_request_{idx}"
                )
            )
        markup.add(
            types.InlineKeyboardButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="delete_all_requests"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"
            )
        )

        text = "üìã –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ:\n\n"
        for idx, req in enumerate(user_requests[user_id]):
            text += f"{idx+1}. {req['manufacturer']} {req['model']} {req['trim']}\n"
            text += f"–ì–æ–¥—ã: {req['year_from']}-{req['year_to']}\n"
            text += f"–ü—Ä–æ–±–µ–≥: {req['mileage_from']}-{req['mileage_to']} –∫–º\n"
            text += "---\n"

        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
        )
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data == "delete_all_requests")
def handle_delete_all_requests(call):
    if not is_authorized(call.from_user.id):
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    user_id = str(call.from_user.id)
    if user_id in user_requests:
        user_requests[user_id] = []
        save_requests(user_requests)

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"
            )
        )

        bot.edit_message_text(
            "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –∞–≤—Ç–æ', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
        )
        bot.answer_callback_query(call.id, "‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


@bot.callback_query_handler(func=lambda call: call.data == "search_car")
def handle_search_car(call):
    manufacturers = get_manufacturers()
    if not manufacturers:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in manufacturers:  # –£–¥–∞–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ [:10]
        kr_name = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        eng_name = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"brand_{eng_name}_{kr_name}"
        display_text = f"{eng_name}"
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.send_message(
        call.message.chat.id, "–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("brand_"))
def handle_brand_selection(call):
    _, eng_name, kr_name = call.data.split("_", 2)
    models = get_models_by_brand(kr_name)
    if not models:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in models:
        model_kr = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        model_eng = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"model_{model_eng}_{model_kr}"
        display_text = f"{model_eng}"
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {eng_name} ({kr_name})\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("model_"))
def handle_model_selection(call):
    _, model_eng, model_kr = call.data.split("_", 2)
    message_text = call.message.text
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    brand_part = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip()
    if " (" in brand_part:
        brand_eng, brand_kr = brand_part.split(" (")
        brand_kr = brand_kr.rstrip(")")
    else:
        brand_eng = brand_part
        brand_kr = ""

    generations = get_generations_by_model(brand_kr, model_kr)
    if not generations:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in generations:
        gen_kr = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        gen_eng = item.get("Metadata", {}).get("EngName", [""])[0]

        start_raw = str(item.get("Metadata", {}).get("ModelStartDate", [""])[0])
        end_raw = str(item.get("Metadata", {}).get("ModelEndDate", [""])[0])

        def format_date(date_str):
            if len(date_str) == 6:
                return f"{date_str[4:6]}.{date_str[0:4]}"
            return ""

        start_date = format_date(start_raw)
        end_date = format_date(end_raw) if len(end_raw) > 0 else "–Ω.–≤."

        period = f"({start_date} ‚Äî {end_date})" if start_date else ""

        callback_data = f"generation_{gen_eng}_{gen_kr}"
        translated_gen_kr = translate_phrase(gen_kr)
        translated_gen_eng = translate_phrase(gen_eng)
        display_text = f"{translated_gen_kr} {translated_gen_eng} {period}".strip()
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("generation_"))
def handle_generation_selection(call):
    _, generation_eng, generation_kr = call.data.split("_", 2)
    message_text = call.message.text

    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    model_line = next(
        (line for line in message_text.split("\n") if "–ú–æ–¥–µ–ª—å:" in line), ""
    )

    brand_eng, brand_kr = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip().split(" (")
    brand_kr = brand_kr.rstrip(")")
    model_part = model_line.replace("–ú–æ–¥–µ–ª—å:", "").strip()
    if " (" in model_part:
        model_eng, model_kr = model_part.split(" (")
        model_kr = model_kr.rstrip(")")
    else:
        model_eng = model_part
        model_kr = ""

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç
    generations = get_generations_by_model(brand_kr, model_kr)
    selected_generation = next(
        (
            g
            for g in generations
            if g.get("DisplayValue") == generation_kr
            or generation_kr in g.get("DisplayValue", "")
            or generation_eng in g.get("Metadata", {}).get("EngName", [""])[0]
        ),
        None,
    )

    if not selected_generation:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
    start_raw = str(
        selected_generation.get("Metadata", {}).get("ModelStartDate", [""])[0]
    )
    end_raw = str(
        selected_generation.get("Metadata", {}).get("ModelEndDate", [""])[0] or ""
    )

    current_year = datetime.now().year

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
    raw_start_year = int(start_raw[:4]) if len(start_raw) == 6 else current_year - 10

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
    start_year = raw_start_year

    if end_raw and end_raw.isdigit():
        end_year = int(end_raw[:4])
    else:
        end_year = current_year

    # --- DEBUGGING --- –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≥–æ–¥—ã
    print(f"‚öôÔ∏è DEBUG [handle_generation_selection] - Raw start_raw: '{start_raw}'")
    print(f"‚öôÔ∏è DEBUG [handle_generation_selection] - Raw end_raw: '{end_raw}'")
    print(
        f"‚öôÔ∏è DEBUG [handle_generation_selection] - Original API start_year: {raw_start_year}"
    )
    print(f"‚öôÔ∏è DEBUG [handle_generation_selection] - Used year_from: {start_year}")
    print(f"‚öôÔ∏è DEBUG [handle_generation_selection] - Calculated year_to: {end_year}")
    # --- END DEBUGGING ---

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
    trims = get_trims_by_generation(brand_kr, model_kr, generation_kr)
    if not trims:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in trims:
        trim_kr = item.get("DisplayValue", "")
        trim_eng = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"trim_{trim_eng}_{trim_kr}"
        display_text = trim_kr
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –∏ –≥–æ–¥–∞—Ö
    user_search_data[user_id].update(
        {
            "manufacturer": brand_kr.strip(),
            "model_group": model_kr.strip(),
            "model": generation_kr.strip(),
            "year_from": start_year,
            "year_to": end_year,
        }
    )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {generation_eng} ({generation_kr})\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("trim_"))
def handle_trim_selection(call):
    parts = call.data.split("_", 2)
    trim_eng = parts[1]
    trim_kr = parts[2] if len(parts) > 2 else parts[1]

    print(f"‚úÖ DEBUG trim selection - raw data:")
    print(f"trim_eng: {trim_eng}")
    print(f"trim_kr: {trim_kr}")

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    start_year = user_search_data[user_id].get("year_from", datetime.now().year - 10)
    end_year = user_search_data[user_id].get("year_to", datetime.now().year)

    # --- DEBUGGING --- –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≥–æ–¥–æ–≤
    print(
        f"‚öôÔ∏è DEBUG [handle_trim_selection] - User {user_id} - Retrieved year_from: {start_year}"
    )
    print(
        f"‚öôÔ∏è DEBUG [handle_trim_selection] - User {user_id} - Retrieved year_to: {end_year}"
    )
    # --- END DEBUGGING ---

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º trim
    user_search_data[user_id]["trim"] = trim_kr.strip()

    print(f"‚úÖ DEBUG user_search_data after trim selection:")
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    year_markup = types.InlineKeyboardMarkup(row_width=4)
    for y in range(start_year, end_year + 1):
        year_markup.add(
            types.InlineKeyboardButton(str(y), callback_data=f"year_from_{y}")
        )

    message_text = call.message.text
    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    model_line = next(
        (line for line in message_text.split("\n") if "–ú–æ–¥–µ–ª—å:" in line), ""
    )
    generation_line = next(
        (line for line in message_text.split("\n") if "–ü–æ–∫–æ–ª–µ–Ω–∏–µ:" in line), ""
    )

    brand_eng, brand_kr = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip().split(" (")
    brand_kr = brand_kr.rstrip(")")
    model_part = model_line.replace("–ú–æ–¥–µ–ª—å:", "").strip()
    if " (" in model_part:
        model_eng, model_kr = model_part.split(" (")
        model_kr = model_kr.rstrip(")")
    else:
        model_eng = model_part
        model_kr = ""

    generation_part = generation_line.replace("–ü–æ–∫–æ–ª–µ–Ω–∏–µ:", "").strip()
    if "(" in generation_part and ")" in generation_part:
        parts = generation_part.rsplit("(", 1)
        generation_eng = parts[0].strip()
        generation_kr = parts[1].replace(")", "").strip()
    else:
        generation_eng = generation_part
        generation_kr = ""

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {generation_eng} ({generation_kr})\n–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {trim_eng} ({trim_kr})\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=year_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("year_from_"))
def handle_year_from_selection(call):
    year_from = int(call.data.split("_")[2])
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –Ω–∞—á–∞–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_search_data[user_id].update({"year_from": year_from})

    print(f"‚úÖ DEBUG user_search_data after year_from selection:")
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    current_year = datetime.now().year
    year_markup = types.InlineKeyboardMarkup(row_width=4)
    for y in range(year_from, current_year + 2):  # +2 –¥–ª—è —É—á–µ—Ç–∞ –±—É–¥—É—â–µ–≥–æ –≥–æ–¥–∞
        year_markup.add(
            types.InlineKeyboardButton(str(y), callback_data=f"year_to_{year_from}_{y}")
        )

    bot.edit_message_text(
        f"–ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥: {year_from}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=year_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("year_to_"))
def handle_year_to_selection(call):
    year_from = int(call.data.split("_")[2])
    year_to = int(call.data.split("_")[3])
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_search_data[user_id].update({"year_to": year_to})

    print(f"‚úÖ DEBUG user_search_data after year_to selection:")
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    mileage_markup = types.InlineKeyboardMarkup(row_width=4)
    for value in range(0, 200001, 10000):
        mileage_markup.add(
            types.InlineKeyboardButton(
                f"{value} –∫–º", callback_data=f"mileage_from_{value}"
            )
        )

    bot.edit_message_text(
        f"–î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {year_from}-{year_to}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("mileage_from_"))
def handle_mileage_from(call):
    mileage_from = int(call.data.split("_")[2])

    print(f"‚úÖ DEBUG user_search_data before mileage_from selection:")
    print(
        json.dumps(
            user_search_data.get(call.from_user.id, {}), indent=2, ensure_ascii=False
        )
    )

    mileage_markup = types.InlineKeyboardMarkup(row_width=4)
    for value in range(mileage_from + 10000, 200001, 10000):
        mileage_markup.add(
            types.InlineKeyboardButton(
                f"{value} –∫–º", callback_data=f"mileage_to_{mileage_from}_{value}"
            )
        )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: {mileage_from} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("mileage_to_"))
def handle_mileage_to(call):
    mileage_from = int(call.data.split("_")[2])
    mileage_to = int(call.data.split("_")[3])

    print(f"‚úÖ DEBUG user_search_data before mileage_to selection:")
    print(
        json.dumps(
            user_search_data.get(call.from_user.id, {}), indent=2, ensure_ascii=False
        )
    )

    user_id = call.from_user.id
    user_data = user_search_data.get(user_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = [
        "manufacturer",
        "model_group",
        "model",
        "trim",
        "year_from",
        "year_to",
    ]
    missing_fields = [field for field in required_fields if field not in user_data]

    if missing_fields:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: {missing_fields}")
        bot.send_message(
            call.message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
        )
        return

    manufacturer = user_data["manufacturer"]
    model_group = user_data["model_group"]
    model = user_data["model"]
    trim = user_data["trim"]
    year_from = user_data["year_from"]
    year_to = user_data["year_to"]

    print("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    print(f"manufacturer: {manufacturer}")
    print(f"model_group: {model_group}")
    print(f"model: {model}")
    print(f"trim: {trim}")
    print(f"year_from: {year_from}")
    print(f"year_to: {year_to}")
    print(f"mileage_from: {mileage_from}")
    print(f"mileage_to: {mileage_to}")

    bot.send_message(
        call.message.chat.id,
        f"–ü—Ä–æ–±–µ–≥: –æ—Ç {mileage_from} –∫–º –¥–æ {mileage_to} –∫–º\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫", callback_data="search_car"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    bot.send_message(
        call.message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
        reply_markup=markup,
    )

    if user_id not in user_requests:
        user_requests[user_id] = []

    user_requests[user_id].append(
        {
            "manufacturer": manufacturer,
            "model_group": model_group,
            "model": model,
            "trim": trim,
            "year_from": year_from,
            "year_to": year_to,
            "mileage_from": mileage_from,
            "mileage_to": mileage_to,
        }
    )

    save_requests(user_requests)

    import threading

    threading.Thread(
        target=check_for_new_cars,
        args=(
            call.message.chat.id,
            manufacturer.strip(),
            model_group.strip(),
            model.strip(),
            trim.strip(),
            year_from,
            year_to,
            mileage_from,
            mileage_to,
            "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —Ü–≤–µ—Ç–∞
        ),
        daemon=True,
    ).start()


@bot.message_handler(state=CarForm.brand)
def handle_brand(message):
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–æ–¥–µ–ª—å:")
    bot.set_state(message.from_user.id, CarForm.model, message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏
@bot.message_handler(state=CarForm.model)
def handle_model(message):
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:")
    bot.set_state(message.from_user.id, CarForm.generation, message.chat.id)


checked_ids = set()


def build_encar_url(
    manufacturer,
    model_group,
    model,
    trim,
    year_from,
    year_to,
    mileage_from,
    mileage_to,
    color,  # –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
):
    if not all(
        [manufacturer.strip(), model_group.strip(), model.strip(), trim.strip()]
    ):
        print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL")
        return ""

    # Convert years to format YYYYMM
    year_from_formatted = f"{year_from}00"
    year_to_formatted = f"{year_to}99"

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º '_' –ø–æ—Å–ª–µ –∫–æ–¥–∞ –º–æ–¥–µ–ª–∏
    if "(" in model and ")" in model:
        base_name, code_part = model.rsplit("(", 1)
        code = code_part.rstrip(")")
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–æ–π –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É API
        base_name = base_name.rstrip()
        model_formatted = f"{base_name}({code}_)"
    else:
        model_formatted = model

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º urllib.parse.quote —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π,
    # –æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∫–æ–±–∫–∏, —Ç–æ—á–∫–∏) –∫–∞–∫ –µ—Å—Ç—å
    manufacturer_encoded = urllib.parse.quote(manufacturer)
    model_group_encoded = urllib.parse.quote(model_group)
    model_formatted_encoded = urllib.parse.quote(model_formatted)
    trim_encoded = urllib.parse.quote(trim)
    sell_type_encoded = urllib.parse.quote("ÏùºÎ∞ò")

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
    url = (
        f"https://api-encar.habsidev.com/api/catalog?count=true&q="
        f"(And.Hidden.N._.SellType.{sell_type_encoded}._."
        f"(C.CarType.A._."
        f"(C.Manufacturer.{manufacturer_encoded}._."
        f"(C.ModelGroup.{model_group_encoded}._."
        f"(C.Model.{model_formatted_encoded}._.BadgeGroup.{trim_encoded}.))))_."
        f"Year.range({year_from_formatted}..{year_to_formatted})._."
        f"Mileage.range({mileage_from}..{mileage_to}).)"
        f"&sr=%7CModifiedDate%7C0%7C1"
    )

    print(f"üì° –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL: {url}")
    return url


def check_for_new_cars(
    chat_id,
    manufacturer,
    model_group,
    model,
    trim,
    year_from,
    year_to,
    mileage_from,
    mileage_to,
    color,
):
    url = build_encar_url(
        manufacturer,
        model_group,
        model,
        trim,
        year_from,
        year_to,
        mileage_from,
        mileage_to,
        color,
    )

    while True:
        try:
            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})

            if response.status_code != 200:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
                time.sleep(300)
                continue

            try:
                data = response.json()
            except Exception as json_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_err}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                time.sleep(300)
                continue

            cars = data.get("SearchResults", [])
            new_cars = [car for car in cars if car["Id"] not in checked_ids]

            for car in new_cars:
                checked_ids.add(car["Id"])
                details_url = f"https://api.encar.com/v1/readside/vehicle/{car['Id']}"
                details_response = requests.get(
                    details_url, headers={"User-Agent": "Mozilla/5.0"}
                )

                if details_response.status_code == 200:
                    details_data = details_response.json()
                    specs = details_data.get("spec", {})
                    displacement = specs.get("displacement", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                    extra_text = f"\n–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {displacement}cc\n\nüëâ <a href='https://fem.encar.com/cars/detail/{car['Id']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>"
                else:
                    extra_text = "\n‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –º–∞—à–∏–Ω–µ."

                name = f'{car.get("Manufacturer", "")} {car.get("Model", "")} {car.get("Badge", "")}'
                price = car.get("Price", 0)
                mileage = car.get("Mileage", 0)
                year = car.get("FormYear", "")

                def format_number(n):
                    return f"{int(n):,}".replace(",", "‚ÄØ")

                formatted_mileage = format_number(mileage)
                formatted_price = format_number(price * 10000)

                text = (
                    f"‚úÖ –ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!\n\n<b>{name}</b> {year} –≥.\n–ü—Ä–æ–±–µ–≥: {formatted_mileage} –∫–º\n–¶–µ–Ω–∞: ‚Ç©{formatted_price}"
                    + extra_text
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫",
                        callback_data="search_car",
                    )
                )
                markup.add(
                    types.InlineKeyboardButton(
                        "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="start",
                    )
                )
                bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)

            time.sleep(300)
        except Exception as e:
            print(f"üîß –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ: {e}")
            time.sleep(300)


# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥ userlist –∏ remove_user
@bot.message_handler(commands=["userlist"])
def handle_userlist_command(message):
    if message.from_user.id not in [604303416, 728438182]:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not ACCESS:
        bot.reply_to(message, "‚ùå –í —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    access_list = list(ACCESS)
    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É:\n\n"
    for user_id in access_list:
        text += f"‚Ä¢ <code>{user_id}</code>\n"

    text += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/remove_user [ID]"

    bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.message_handler(commands=["remove_user"])
def handle_remove_user(message):
    if message.from_user.id not in [604303416, 728438182]:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove_user [ID]")
            return

        user_id_to_remove = int(parts[1])
        if user_id_to_remove in ACCESS:
            ACCESS.remove(user_id_to_remove)
            save_access()
            bot.reply_to(
                message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} —É–¥–∞–ª—ë–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–∞."
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from datetime import datetime

    print("=" * 50)
    print(
        f"üöÄ [KGA Korea Bot] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    load_requests()
    print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    print("=" * 50)
    ACCESS = load_access()
    bot.infinity_polling()
